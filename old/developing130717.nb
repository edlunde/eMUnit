(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[     18230,        456]
NotebookOptionsPosition[     17093,        416]
NotebookOutlinePosition[     17473,        433]
CellTagsIndexPosition[     17430,        430]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["\<\
ToDo:
AssertMessage: is quiet really needed inside block?

report timing
AssertMatch
reorganize package file for easier development
refactor tests using subsuites
refactor assert tests - function for throwing fail exceptions

fix bug: RunTest[suite] RunTest[stringPattern] overlap
fix bug: AssertEquals[smt, $MessageList] doesn\[CloseCurlyQuote]t report \
\[OpenCurlyDoubleQuote]gave \[OpenCurlyDoubleQuote] correctly

Maybe:
errors - catching unexpected exceptions
redesign public interface, RunTest called something else?
Test coverage analysis
go through UnitTest to get ideas (catch errors from tests? \
time/memoryConstrained)
format test result - make sure multiple failed asserts in same test gets \
reported\
\>", "Text",
 CellChangeTimes->{{3.581768562936214*^9, 3.581768590565977*^9}, {
   3.581840701717978*^9, 3.58184076308335*^9}, {3.581851980794738*^9, 
   3.581851983417935*^9}, {3.58187240613227*^9, 3.581872414199696*^9}, {
   3.5818747903355827`*^9, 3.58187479342828*^9}, {3.5819315084500437`*^9, 
   3.581931511136066*^9}, {3.5819958193401957`*^9, 3.581995862250408*^9}, {
   3.581997277371264*^9, 3.581997292968514*^9}, 3.582002498820642*^9, {
   3.582002888768745*^9, 3.582002908911763*^9}, {3.582006185223071*^9, 
   3.582006188429895*^9}, 3.582006471948948*^9, {3.582007361144827*^9, 
   3.582007376918057*^9}, {3.582007417310629*^9, 3.582007417492003*^9}, {
   3.5820090431093616`*^9, 3.582009078025742*^9}, {3.582009145382818*^9, 
   3.5820091637254353`*^9}, {3.58201212725124*^9, 3.5820121551067944`*^9}, {
   3.582012258042755*^9, 3.582012283599526*^9}, 3.5820277569741993`*^9, {
   3.582028550058136*^9, 3.582028583686173*^9}, 3.582086532733889*^9, {
   3.582091552767826*^9, 3.582091593150124*^9}, {3.582343631415038*^9, 
   3.5823436683155127`*^9}, {3.582530619684629*^9, 3.582530642866308*^9}, {
   3.582530697460455*^9, 3.582530714970293*^9}, 3.582537402525955*^9, 
   3.582608672706918*^9, {3.582615295244315*^9, 3.582615307274456*^9}, 
   3.582619659783312*^9, {3.5826201973767776`*^9, 3.582620197647463*^9}, {
   3.5826210344963284`*^9, 3.582621047449133*^9}, {3.582621126508415*^9, 
   3.582621146449389*^9}, 3.582629603882141*^9, {3.5826298043307343`*^9, 
   3.5826298062961407`*^9}, {3.582631208507498*^9, 3.582631217504641*^9}, {
   3.582704901826563*^9, 3.582704917016987*^9}, {3.5827057468817587`*^9, 
   3.582705756756933*^9}, {3.582705876900025*^9, 3.582705892654476*^9}, 
   3.582722043540991*^9, {3.582723896693125*^9, 3.582723896875803*^9}, 
   3.5827246646261683`*^9, {3.582773509786828*^9, 3.5827735177536287`*^9}, {
   3.582774073667307*^9, 3.582774102465458*^9}, {3.58277696216648*^9, 
   3.58277700673461*^9}, {3.582787756163471*^9, 3.582787798602582*^9}, {
   3.5827943799476748`*^9, 3.582794389672349*^9}, {3.582957260376691*^9, 
   3.582957332156413*^9}, {3.582959516063525*^9, 3.582959539149762*^9}, {
   3.582968842973154*^9, 3.582968846137865*^9}, {3.582981880498185*^9, 
   3.582981920004994*^9}, {3.582981984895319*^9, 3.582981991732452*^9}, {
   3.582987371218575*^9, 3.582987394982971*^9}, {3.583032560299219*^9, 
   3.583032560626008*^9}, {3.583032905522101*^9, 3.583032908413501*^9}, {
   3.583033798061479*^9, 3.583033801611805*^9}, {3.583036127365078*^9, 
   3.583036127739038*^9}, {3.583036833912822*^9, 3.5830368341586237`*^9}, {
   3.583038448771937*^9, 3.583038464401725*^9}, 3.583039121025043*^9}],

Cell[CellGroupData[{

Cell["Load", "Subsection",
 CellChangeTimes->{{3.581851866452701*^9, 3.581851871929957*^9}}],

Cell[BoxData[{
 RowBox[{"Needs", "[", 
  RowBox[{"\"\<eMUnit`\>\"", ",", 
   RowBox[{
    RowBox[{"NotebookDirectory", "[", "]"}], "<>", "\"\<eMUnit.m\>\""}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"1", "\[Equal]", "0"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"Information", "[", 
       RowBox[{"#", ",", 
        RowBox[{"LongForm", "\[Rule]", "False"}]}], "]"}], "&"}], "/@", 
     RowBox[{"Names", "[", "\"\<eMUnit`*\>\"", "]"}]}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"TestEMUnitPackage", "[", "]"}]}], "Input",
 CellChangeTimes->{{3.5818484023257933`*^9, 3.581848427412692*^9}, {
   3.581848463469602*^9, 3.581848493661785*^9}, {3.581848563827791*^9, 
   3.581848596970037*^9}, 3.581848645442906*^9, {3.581849868655651*^9, 
   3.581849880764333*^9}, {3.581851013530964*^9, 3.581851014977862*^9}, {
   3.581997216343136*^9, 3.581997223093801*^9}, {3.582028072047119*^9, 
   3.5820280862060013`*^9}, 3.5820282347247047`*^9, {3.582091605514361*^9, 
   3.582091621974869*^9}, {3.582533212706553*^9, 3.58253321415359*^9}, {
   3.5825381694075317`*^9, 3.5825381701969213`*^9}, {3.582609980886573*^9, 
   3.582609997341362*^9}, {3.58262974579161*^9, 3.582629747990677*^9}, {
   3.5826297865953827`*^9, 3.582629798466366*^9}, {3.5830364384905357`*^9, 
   3.5830364447013702`*^9}, {3.58303648550263*^9, 3.583036492215343*^9}, {
   3.58303653196008*^9, 3.583036538095132*^9}, 3.583036778513389*^9, 
   3.5830368136422663`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["Test", "Subsection",
 CellChangeTimes->{{3.5818518639068537`*^9, 3.58185186444191*^9}}],

Cell[BoxData[
 RowBox[{"TestEMUnitPackage", "[", "]"}]], "Input",
 CellChangeTimes->{{3.58193116053482*^9, 3.581931163479122*^9}, 
   3.581931282046006*^9, {3.58201203266726*^9, 3.5820120334177094`*^9}, {
   3.582030588839685*^9, 3.582030589478722*^9}, {3.582537327346949*^9, 
   3.5825373312583427`*^9}, {3.582537387406983*^9, 3.5825373879425287`*^9}, {
   3.582538505471827*^9, 3.5825385059512777`*^9}, 3.582607087083186*^9, {
   3.582607210710766*^9, 3.582607211236981*^9}, {3.5827198422592087`*^9, 
   3.58271984271977*^9}, {3.5827756933526287`*^9, 3.582775694542557*^9}, {
   3.582792095033633*^9, 3.582792095912553*^9}, {3.58279245885989*^9, 
   3.582792460155614*^9}, {3.582793013386784*^9, 3.5827930141130047`*^9}, {
   3.582981597056799*^9, 3.582981597854376*^9}, {3.582988321622878*^9, 
   3.582988322543703*^9}, {3.5829887460578833`*^9, 3.582988746638916*^9}, {
   3.583030967353969*^9, 3.583030974581752*^9}}],

Cell[BoxData[
 RowBox[{"RunTest", "[", 
  RowBox[{
  "eMUnit`PackageTests`frameworkTests", ",", " ", 
   "\"\<testAssertEqualsThrow\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.583030985615196*^9, 3.583031012647855*^9}, {
  3.5830315682703447`*^9, 3.5830315684298697`*^9}, {3.583032151751285*^9, 
  3.583032160671795*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Catch", "[", 
   RowBox[{
    RowBox[{"AssertMessage", "[", 
     RowBox[{
      RowBox[{"Drop", "::", "drop"}], ",", " ", 
      RowBox[{"Drop", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", "1"}], "]"}]}], "]"}], ",", 
    "\"\<AssertMessage\>\""}], "]"}], "//", "Trace"}]], "Input",
 CellChangeTimes->{{3.5830353200429792`*^9, 3.583035343138126*^9}, {
  3.5830353997051992`*^9, 3.5830354256886168`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Develop new", "Subsection",
 CellChangeTimes->{{3.581872954204172*^9, 3.581872957418704*^9}, {
  3.5819288585884447`*^9, 3.581928858905981*^9}}],

Cell[BoxData[{
 RowBox[{"AddTest", "[", 
  RowBox[{
  "eMUnit`PackageTests`frameworkTests", ",", " ", "\"\<testAddSuite\>\"", ",",
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"AddSuite", "[", 
     RowBox[{"eMUnit`PackageTests`mytests", ",", "mySubsuite"}], "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"AssertEquals", "[", 
     RowBox[{"\"\<ok\>\"", ",", 
      RowBox[{"eMUnit`PackageTests`mytests", "[", "mySubsuite", "]"}]}], 
     "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
 RowBox[{"TestEMUnitPackage", "[", "]"}]}], "Input",
 CellChangeTimes->{{3.582614895140676*^9, 3.58261502932592*^9}, {
  3.582615076155921*^9, 3.582615077323037*^9}}],

Cell[BoxData[{
 RowBox[{"AddTest", "[", 
  RowBox[{
  "eMUnit`PackageTests`frameworkTests", ",", " ", 
   "\"\<testAssertTrueUnevaluating\>\"", ",", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "result"}], "}"}], ",", 
     RowBox[{
      RowBox[{"ClearAll", "[", "a", "]"}], ";", 
      RowBox[{"result", " ", "=", " ", 
       RowBox[{"MatchQ", "[", 
        RowBox[{
         RowBox[{"Catch", "[", 
          RowBox[{
           RowBox[{"AssertTrue", "[", "a", "]"}], ",", " ", 
           "\"\<AssertTrue\>\""}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"HoldComplete", "[", 
           RowBox[{"AssertTrue", "[", "_", "]"}], "]"}], "}"}]}], "]"}]}], 
      ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", "result"}], ",", 
        RowBox[{"Throw", "[", 
         RowBox[{
          RowBox[{"{", "\"\<testAssertTrueUnevaluating failed\>\"", "}"}], 
          ",", " ", "\"\<AssertEquals\>\""}], "]"}]}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"TestEMUnitPackage", "[", "]"}]}], "Input",
 CellChangeTimes->{{3.582006213616939*^9, 3.582006215192677*^9}, 
   3.582007193324407*^9, {3.582026797950581*^9, 3.5820269460054092`*^9}, {
   3.582027179427923*^9, 3.582027180122036*^9}, 3.582027226217127*^9, {
   3.58208653942452*^9, 3.582086611379977*^9}, {3.582086690228929*^9, 
   3.58208672566842*^9}, {3.58208676906464*^9, 3.582086808386722*^9}, {
   3.5820869044758863`*^9, 3.5820869112107897`*^9}, {3.582086996430067*^9, 
   3.5820870515918903`*^9}, {3.582087086284031*^9, 3.5820871915095367`*^9}, {
   3.582087299236559*^9, 3.5820873004099283`*^9}, {3.582087442330166*^9, 
   3.5820874739357653`*^9}, {3.58208780252846*^9, 3.5820878046629953`*^9}, {
   3.582088083615999*^9, 3.582088083716299*^9}, {3.582088155351742*^9, 
   3.5820882321216803`*^9}, {3.582088265066462*^9, 3.58208827867887*^9}, {
   3.5820886142820377`*^9, 3.582088629384028*^9}, {3.582091018636495*^9, 
   3.582091079583693*^9}, {3.5820911882280083`*^9, 3.5820911945462637`*^9}, {
   3.5820912384610786`*^9, 3.582091280029091*^9}, {3.582532621251766*^9, 
   3.582532622187353*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"testResult", "[", 
      RowBox[{"level1", ",", "\"\<test1.1\>\"", ",", "0"}], "]"}], ",", 
     RowBox[{"testResult", "[", 
      RowBox[{"level1", ",", "level2", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"testResult", "[", 
          RowBox[{"level2", ",", "\"\<test2.1\>\"", ",", "3"}], "]"}], ",", 
         RowBox[{"testResult", "[", 
          RowBox[{"level2", ",", "\"\<test2.2\>\"", ",", 
           RowBox[{"HoldComplete", "[", 
            RowBox[{"AssertTrue", "[", "False", "]"}], "]"}]}], "]"}], ",", 
         RowBox[{"testResult", "[", 
          RowBox[{"level2", ",", "level3", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"testResult", "[", 
              RowBox[{"level3", ",", "\"\<test3.1\>\"", ",", 
               RowBox[{"HoldComplete", "[", 
                RowBox[{"AssertTrue", "[", "False", "]"}], "]"}]}], "]"}], 
             ",", 
             RowBox[{"testResult", "[", 
              RowBox[{"level3", ",", "\"\<test3.2\>\"", ",", "15"}], "]"}]}], 
            "}"}]}], "]"}]}], "}"}]}], "]"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.582624228839295*^9, {3.582624819134058*^9, 3.58262483599594*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"isFailure", "[", "result_testResult", "]"}], " ", ":=", " ", 
  RowBox[{"Not", "[", 
   RowBox[{
    RowBox[{"result", "[", 
     RowBox[{"[", "1", "]"}], "]"}], " ", "===", " ", "\"\<Success\>\""}], 
   "]"}]}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "parseResultTree", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"indentLevel", "=", 
   RowBox[{"-", "1"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"parseResultTree", "[", "result_testResult", "]"}], ":=", 
  RowBox[{
   RowBox[{"StringJoin", "@", 
    RowBox[{"Table", "[", 
     RowBox[{"\"\<       \>\"", ",", 
      RowBox[{"{", "indentLevel", "}"}]}], "]"}]}], "<>", 
   RowBox[{"ToString", "[", 
    RowBox[{"result", "[", 
     RowBox[{"[", "2", "]"}], "]"}], "]"}], "<>", "\"\<   \>\"", "<>", 
   RowBox[{"parseResultTree", "@", 
    RowBox[{"result", "[", 
     RowBox[{"[", "3", "]"}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"parseResultTree", "[", 
   RowBox[{"results", ":", 
    RowBox[{"{", "__testResult", "}"}]}], "]"}], ":=", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"indentLevel", "++"}], ";", 
    RowBox[{"StringJoin", "[", 
     RowBox[{"\"\<\\n\>\"", ",", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"parseResultTree", "/@", "results"}], ",", "\"\<\\n\>\""}], 
       "]"}]}], "]"}]}], ")"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"parseResultTree", "[", "result_", "]"}], ":=", 
  RowBox[{"ToString", "@", "result"}]}]}], "Input",
 CellChangeTimes->{{3.582624567900922*^9, 3.5826246049276114`*^9}, {
  3.582624714086199*^9, 3.5826247166809053`*^9}, {3.58262485416265*^9, 
  3.582624988335705*^9}, {3.582625046971202*^9, 3.5826251228752813`*^9}, {
  3.582625222371786*^9, 3.5826252253539667`*^9}, {3.5826252557144423`*^9, 
  3.58262533220557*^9}, {3.582625365373354*^9, 3.582625404691412*^9}, {
  3.5826264328785954`*^9, 3.5826265011363*^9}, {3.582626549881907*^9, 
  3.582626575033399*^9}}],

Cell[BoxData[
 RowBox[{"parseResultTree", "[", "result", "]"}]], "Input",
 CellChangeTimes->{{3.582624879202484*^9, 3.5826248828984947`*^9}, {
  3.58262495511346*^9, 3.5826249552722263`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"isFailure", "[", "result_testResult", "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"Head", "[", 
    RowBox[{"result", "[", 
     RowBox[{"[", 
      RowBox[{"-", "1"}], "]"}], "]"}], "]"}], " ", "===", " ", 
   "HoldComplete"}]}]], "Input"],

Cell[BoxData["result"], "Input"],

Cell[BoxData[
 RowBox[{"Count", "[", 
  RowBox[{"result", ",", 
   RowBox[{"HoldComplete", "[", "_", "]"}], ",", "Infinity"}], "]"}]], "Input",\

 CellChangeTimes->{{3.582627675274387*^9, 3.582627708110272*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"casesHold", "[", 
   RowBox[{"exp_", ",", "patt_"}], "]"}], ":=", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"MatchQ", "[", 
       RowBox[{"exp", ",", "patt"}], "]"}], ",", 
      RowBox[{"Sow", "[", "exp", "]"}]}], "]"}], ";", 
    RowBox[{
     RowBox[{
      RowBox[{"casesHold", "[", 
       RowBox[{"#", ",", "patt"}], "]"}], "&"}], "/@", "exp"}], ";"}], 
   ")"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"casesHold", "[", 
   RowBox[{
    RowBox[{"HoldComplete", "[", "exp_", "]"}], ",", "patt_"}], "]"}], ":=", 
  RowBox[{"HoldComplete", "[", "exp", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"CasesDontEnterHold", "[", 
    RowBox[{"exp_", ",", "patt_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Reap", "[", 
     RowBox[{"casesHold", "[", 
      RowBox[{"exp", ",", "patt"}], "]"}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"2", ",", "1"}], "]"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Length", "@", 
  RowBox[{"CasesDontEnterHold", "[", 
   RowBox[{"result", ",", 
    RowBox[{"res_testResult", "/;", 
     RowBox[{"!", 
      RowBox[{"MatchQ", "[", 
       RowBox[{
        RowBox[{"res", "[", 
         RowBox[{"[", "3", "]"}], "]"}], ",", 
        RowBox[{"{", "__testResult", "}"}]}], "]"}]}]}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"CasesDontEnterHold", "[", 
  RowBox[{"result", ",", 
   RowBox[{"_", "?", "isFailure"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"%", "//", "Length"}]}], "Input",
 CellChangeTimes->{{3.582627804808755*^9, 3.582627808003663*^9}, {
  3.582627839675115*^9, 3.582627856239696*^9}, {3.582627888525457*^9, 
  3.58262806212391*^9}, {3.582628150717561*^9, 3.582628437345467*^9}}],

Cell[BoxData[
 RowBox[{"Quiet", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"RunTest", "[", 
     RowBox[{"notests", ",", 
      RowBox[{"__", " ", "~~", " ", "\"\<nonmatchingPattern\>\""}]}], "]"}], 
    ";", "\[IndentingNewLine]", 
    RowBox[{"AssertEquals", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"HoldForm", "[", 
        RowBox[{"eMUnitMessages", "::", "nonexistentTest"}], "]"}], "}"}], 
      ",", "$MessageList"}], "]"}], ";"}], "\[IndentingNewLine]", ",", 
   RowBox[{"eMUnitMessages", "::", "nonexistentTest"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5827724397144547`*^9, 3.582772565932522*^9}}],

Cell[BoxData[
 RowBox[{"RunTest", "[", 
  RowBox[{"__", " ", "~~", " ", "\"\<nonmatchingPattern\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{3.582772767005569*^9}]
}, Closed]]
},
WindowSize->{703, 677},
WindowMargins->{{666, Automatic}, {Automatic, 289}},
ShowSelection->True,
FrontEndVersion->"9.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (November 20, \
2012)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[557, 20, 3377, 58, 353, "Text"],
Cell[CellGroupData[{
Cell[3959, 82, 92, 1, 44, "Subsection"],
Cell[4054, 85, 1499, 30, 63, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[5590, 120, 93, 1, 36, "Subsection"],
Cell[5686, 123, 921, 13, 28, "Input"],
Cell[6610, 138, 324, 7, 28, "Input"],
Cell[6937, 147, 450, 12, 46, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7424, 164, 150, 2, 44, "Subsection"],
Cell[7577, 168, 689, 15, 97, "Input"],
Cell[8269, 185, 2203, 45, 165, "Input"],
Cell[10475, 232, 1287, 30, 148, "Input"],
Cell[11765, 264, 257, 7, 28, "Input"],
Cell[12025, 273, 1739, 42, 165, "Input"],
Cell[13767, 317, 191, 3, 28, "Input"],
Cell[13961, 322, 277, 8, 28, "Input"],
Cell[14241, 332, 32, 0, 28, "Input"],
Cell[14276, 334, 211, 5, 28, "Input"],
Cell[14490, 341, 1771, 49, 182, "Input"],
Cell[16264, 392, 645, 15, 97, "Input"],
Cell[16912, 409, 165, 4, 28, "Input"]
}, Closed]]
}
]
*)

(* End of internal cache information *)
